// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.pulumi.pihole;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * Experimental: Pi-hole API token. Conflicts with `password`.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return Experimental: Pi-hole API token. Conflicts with `password`.
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * CA file to connect to Pi-hole with TLS
     * 
     */
    @Import(name="caFile")
    private @Nullable Output<String> caFile;

    /**
     * @return CA file to connect to Pi-hole with TLS
     * 
     */
    public Optional<Output<String>> caFile() {
        return Optional.ofNullable(this.caFile);
    }

    /**
     * The admin password used to login to the admin dashboard. Conflicts with `api_token`.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The admin password used to login to the admin dashboard. Conflicts with `api_token`.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * URL where Pi-hole is deployed
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL where Pi-hole is deployed
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.apiToken = $.apiToken;
        this.caFile = $.caFile;
        this.password = $.password;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Experimental: Pi-hole API token. Conflicts with `password`.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Experimental: Pi-hole API token. Conflicts with `password`.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param caFile CA file to connect to Pi-hole with TLS
         * 
         * @return builder
         * 
         */
        public Builder caFile(@Nullable Output<String> caFile) {
            $.caFile = caFile;
            return this;
        }

        /**
         * @param caFile CA file to connect to Pi-hole with TLS
         * 
         * @return builder
         * 
         */
        public Builder caFile(String caFile) {
            return caFile(Output.of(caFile));
        }

        /**
         * @param password The admin password used to login to the admin dashboard. Conflicts with `api_token`.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The admin password used to login to the admin dashboard. Conflicts with `api_token`.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param url URL where Pi-hole is deployed
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL where Pi-hole is deployed
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ProviderArgs build() {
            $.apiToken = Codegen.stringProp("apiToken").output().arg($.apiToken).env("PIHOLE_API_TOKEN").getNullable();
            $.caFile = Codegen.stringProp("caFile").output().arg($.caFile).env("PIHOLE_CA_FILE").getNullable();
            $.password = Codegen.stringProp("password").output().arg($.password).env("PIHOLE_PASSWORD").getNullable();
            $.url = Codegen.stringProp("url").output().arg($.url).env("PIHOLE_URL").getNullable();
            return $;
        }
    }

}
