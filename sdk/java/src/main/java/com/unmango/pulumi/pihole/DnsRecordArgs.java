// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.pulumi.pihole;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DnsRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsRecordArgs Empty = new DnsRecordArgs();

    /**
     * DNS record domain
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return DNS record domain
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * IP address to route traffic to from the DNS record domain
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return IP address to route traffic to from the DNS record domain
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    private DnsRecordArgs() {}

    private DnsRecordArgs(DnsRecordArgs $) {
        this.domain = $.domain;
        this.ip = $.ip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsRecordArgs $;

        public Builder() {
            $ = new DnsRecordArgs();
        }

        public Builder(DnsRecordArgs defaults) {
            $ = new DnsRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain DNS record domain
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain DNS record domain
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param ip IP address to route traffic to from the DNS record domain
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IP address to route traffic to from the DNS record domain
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        public DnsRecordArgs build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.ip = Objects.requireNonNull($.ip, "expected parameter 'ip' to be non-null");
            return $;
        }
    }

}
