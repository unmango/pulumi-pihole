// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.pulumi.pihole;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CnameRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final CnameRecordArgs Empty = new CnameRecordArgs();

    /**
     * Domain to create a CNAME record for
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return Domain to create a CNAME record for
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * Value of the CNAME record where traffic will be directed to from the configured domain value
     * 
     */
    @Import(name="target", required=true)
    private Output<String> target;

    /**
     * @return Value of the CNAME record where traffic will be directed to from the configured domain value
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    private CnameRecordArgs() {}

    private CnameRecordArgs(CnameRecordArgs $) {
        this.domain = $.domain;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CnameRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CnameRecordArgs $;

        public Builder() {
            $ = new CnameRecordArgs();
        }

        public Builder(CnameRecordArgs defaults) {
            $ = new CnameRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain Domain to create a CNAME record for
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain to create a CNAME record for
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param target Value of the CNAME record where traffic will be directed to from the configured domain value
         * 
         * @return builder
         * 
         */
        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Value of the CNAME record where traffic will be directed to from the configured domain value
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public CnameRecordArgs build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.target = Objects.requireNonNull($.target, "expected parameter 'target' to be non-null");
            return $;
        }
    }

}
