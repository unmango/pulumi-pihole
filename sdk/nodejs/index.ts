// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdBlockerStatusArgs, AdBlockerStatusState } from "./adBlockerStatus";
export type AdBlockerStatus = import("./adBlockerStatus").AdBlockerStatus;
export const AdBlockerStatus: typeof import("./adBlockerStatus").AdBlockerStatus = null as any;
utilities.lazyLoad(exports, ["AdBlockerStatus"], () => require("./adBlockerStatus"));

export { CnameRecordArgs, CnameRecordState } from "./cnameRecord";
export type CnameRecord = import("./cnameRecord").CnameRecord;
export const CnameRecord: typeof import("./cnameRecord").CnameRecord = null as any;
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { GetCnameRecordsResult } from "./getCnameRecords";
export const getCnameRecords: typeof import("./getCnameRecords").getCnameRecords = null as any;
export const getCnameRecordsOutput: typeof import("./getCnameRecords").getCnameRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecords","getCnameRecordsOutput"], () => require("./getCnameRecords"));

export { GetDnsRecordsResult } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetDomainsArgs, GetDomainsResult, GetDomainsOutputArgs } from "./getDomains";
export const getDomains: typeof import("./getDomains").getDomains = null as any;
export const getDomainsOutput: typeof import("./getDomains").getDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDomains","getDomainsOutput"], () => require("./getDomains"));

export { GetGroupsResult } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pihole:index/adBlockerStatus:AdBlockerStatus":
                return new AdBlockerStatus(name, <any>undefined, { urn })
            case "pihole:index/cnameRecord:CnameRecord":
                return new CnameRecord(name, <any>undefined, { urn })
            case "pihole:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "pihole:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pihole", "index/adBlockerStatus", _module)
pulumi.runtime.registerResourceModule("pihole", "index/cnameRecord", _module)
pulumi.runtime.registerResourceModule("pihole", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("pihole", "index/group", _module)
pulumi.runtime.registerResourcePackage("pihole", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pihole") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
