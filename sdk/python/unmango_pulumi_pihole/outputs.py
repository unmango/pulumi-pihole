# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCnameRecordsRecordResult',
    'GetDnsRecordsRecordResult',
    'GetDomainsDomainResult',
    'GetGroupsGroupResult',
]

@pulumi.output_type
class GetCnameRecordsRecordResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 target: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetDnsRecordsRecordResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 ip: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetDomainsDomainResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 domain: str,
                 enabled: bool,
                 group_ids: Sequence[int],
                 id: int,
                 type: str,
                 wildcard: bool):
        """
        :param int id: The ID of this resource.
        :param str type: Filter on allowed or denied domains. Must be either 'allow' or 'deny'.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[int]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Filter on allowed or denied domains. Must be either 'allow' or 'deny'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def wildcard(self) -> bool:
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 enabled: bool,
                 id: int,
                 name: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


