// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pihole

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-pihole/sdk/go/pihole/internal"
)

var _ = internal.GetEnvOrDefault

type GetCnameRecordsRecord struct {
	Domain string `pulumi:"domain"`
	Target string `pulumi:"target"`
}

// GetCnameRecordsRecordInput is an input type that accepts GetCnameRecordsRecordArgs and GetCnameRecordsRecordOutput values.
// You can construct a concrete instance of `GetCnameRecordsRecordInput` via:
//
//	GetCnameRecordsRecordArgs{...}
type GetCnameRecordsRecordInput interface {
	pulumi.Input

	ToGetCnameRecordsRecordOutput() GetCnameRecordsRecordOutput
	ToGetCnameRecordsRecordOutputWithContext(context.Context) GetCnameRecordsRecordOutput
}

type GetCnameRecordsRecordArgs struct {
	Domain pulumi.StringInput `pulumi:"domain"`
	Target pulumi.StringInput `pulumi:"target"`
}

func (GetCnameRecordsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCnameRecordsRecord)(nil)).Elem()
}

func (i GetCnameRecordsRecordArgs) ToGetCnameRecordsRecordOutput() GetCnameRecordsRecordOutput {
	return i.ToGetCnameRecordsRecordOutputWithContext(context.Background())
}

func (i GetCnameRecordsRecordArgs) ToGetCnameRecordsRecordOutputWithContext(ctx context.Context) GetCnameRecordsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCnameRecordsRecordOutput)
}

func (i GetCnameRecordsRecordArgs) ToOutput(ctx context.Context) pulumix.Output[GetCnameRecordsRecord] {
	return pulumix.Output[GetCnameRecordsRecord]{
		OutputState: i.ToGetCnameRecordsRecordOutputWithContext(ctx).OutputState,
	}
}

// GetCnameRecordsRecordArrayInput is an input type that accepts GetCnameRecordsRecordArray and GetCnameRecordsRecordArrayOutput values.
// You can construct a concrete instance of `GetCnameRecordsRecordArrayInput` via:
//
//	GetCnameRecordsRecordArray{ GetCnameRecordsRecordArgs{...} }
type GetCnameRecordsRecordArrayInput interface {
	pulumi.Input

	ToGetCnameRecordsRecordArrayOutput() GetCnameRecordsRecordArrayOutput
	ToGetCnameRecordsRecordArrayOutputWithContext(context.Context) GetCnameRecordsRecordArrayOutput
}

type GetCnameRecordsRecordArray []GetCnameRecordsRecordInput

func (GetCnameRecordsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCnameRecordsRecord)(nil)).Elem()
}

func (i GetCnameRecordsRecordArray) ToGetCnameRecordsRecordArrayOutput() GetCnameRecordsRecordArrayOutput {
	return i.ToGetCnameRecordsRecordArrayOutputWithContext(context.Background())
}

func (i GetCnameRecordsRecordArray) ToGetCnameRecordsRecordArrayOutputWithContext(ctx context.Context) GetCnameRecordsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCnameRecordsRecordArrayOutput)
}

func (i GetCnameRecordsRecordArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCnameRecordsRecord] {
	return pulumix.Output[[]GetCnameRecordsRecord]{
		OutputState: i.ToGetCnameRecordsRecordArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCnameRecordsRecordOutput struct{ *pulumi.OutputState }

func (GetCnameRecordsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCnameRecordsRecord)(nil)).Elem()
}

func (o GetCnameRecordsRecordOutput) ToGetCnameRecordsRecordOutput() GetCnameRecordsRecordOutput {
	return o
}

func (o GetCnameRecordsRecordOutput) ToGetCnameRecordsRecordOutputWithContext(ctx context.Context) GetCnameRecordsRecordOutput {
	return o
}

func (o GetCnameRecordsRecordOutput) ToOutput(ctx context.Context) pulumix.Output[GetCnameRecordsRecord] {
	return pulumix.Output[GetCnameRecordsRecord]{
		OutputState: o.OutputState,
	}
}

func (o GetCnameRecordsRecordOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCnameRecordsRecord) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetCnameRecordsRecordOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetCnameRecordsRecord) string { return v.Target }).(pulumi.StringOutput)
}

type GetCnameRecordsRecordArrayOutput struct{ *pulumi.OutputState }

func (GetCnameRecordsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCnameRecordsRecord)(nil)).Elem()
}

func (o GetCnameRecordsRecordArrayOutput) ToGetCnameRecordsRecordArrayOutput() GetCnameRecordsRecordArrayOutput {
	return o
}

func (o GetCnameRecordsRecordArrayOutput) ToGetCnameRecordsRecordArrayOutputWithContext(ctx context.Context) GetCnameRecordsRecordArrayOutput {
	return o
}

func (o GetCnameRecordsRecordArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCnameRecordsRecord] {
	return pulumix.Output[[]GetCnameRecordsRecord]{
		OutputState: o.OutputState,
	}
}

func (o GetCnameRecordsRecordArrayOutput) Index(i pulumi.IntInput) GetCnameRecordsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCnameRecordsRecord {
		return vs[0].([]GetCnameRecordsRecord)[vs[1].(int)]
	}).(GetCnameRecordsRecordOutput)
}

type GetDnsRecordsRecord struct {
	Domain string `pulumi:"domain"`
	Ip     string `pulumi:"ip"`
}

// GetDnsRecordsRecordInput is an input type that accepts GetDnsRecordsRecordArgs and GetDnsRecordsRecordOutput values.
// You can construct a concrete instance of `GetDnsRecordsRecordInput` via:
//
//	GetDnsRecordsRecordArgs{...}
type GetDnsRecordsRecordInput interface {
	pulumi.Input

	ToGetDnsRecordsRecordOutput() GetDnsRecordsRecordOutput
	ToGetDnsRecordsRecordOutputWithContext(context.Context) GetDnsRecordsRecordOutput
}

type GetDnsRecordsRecordArgs struct {
	Domain pulumi.StringInput `pulumi:"domain"`
	Ip     pulumi.StringInput `pulumi:"ip"`
}

func (GetDnsRecordsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDnsRecordsRecord)(nil)).Elem()
}

func (i GetDnsRecordsRecordArgs) ToGetDnsRecordsRecordOutput() GetDnsRecordsRecordOutput {
	return i.ToGetDnsRecordsRecordOutputWithContext(context.Background())
}

func (i GetDnsRecordsRecordArgs) ToGetDnsRecordsRecordOutputWithContext(ctx context.Context) GetDnsRecordsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDnsRecordsRecordOutput)
}

func (i GetDnsRecordsRecordArgs) ToOutput(ctx context.Context) pulumix.Output[GetDnsRecordsRecord] {
	return pulumix.Output[GetDnsRecordsRecord]{
		OutputState: i.ToGetDnsRecordsRecordOutputWithContext(ctx).OutputState,
	}
}

// GetDnsRecordsRecordArrayInput is an input type that accepts GetDnsRecordsRecordArray and GetDnsRecordsRecordArrayOutput values.
// You can construct a concrete instance of `GetDnsRecordsRecordArrayInput` via:
//
//	GetDnsRecordsRecordArray{ GetDnsRecordsRecordArgs{...} }
type GetDnsRecordsRecordArrayInput interface {
	pulumi.Input

	ToGetDnsRecordsRecordArrayOutput() GetDnsRecordsRecordArrayOutput
	ToGetDnsRecordsRecordArrayOutputWithContext(context.Context) GetDnsRecordsRecordArrayOutput
}

type GetDnsRecordsRecordArray []GetDnsRecordsRecordInput

func (GetDnsRecordsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDnsRecordsRecord)(nil)).Elem()
}

func (i GetDnsRecordsRecordArray) ToGetDnsRecordsRecordArrayOutput() GetDnsRecordsRecordArrayOutput {
	return i.ToGetDnsRecordsRecordArrayOutputWithContext(context.Background())
}

func (i GetDnsRecordsRecordArray) ToGetDnsRecordsRecordArrayOutputWithContext(ctx context.Context) GetDnsRecordsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDnsRecordsRecordArrayOutput)
}

func (i GetDnsRecordsRecordArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDnsRecordsRecord] {
	return pulumix.Output[[]GetDnsRecordsRecord]{
		OutputState: i.ToGetDnsRecordsRecordArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDnsRecordsRecordOutput struct{ *pulumi.OutputState }

func (GetDnsRecordsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDnsRecordsRecord)(nil)).Elem()
}

func (o GetDnsRecordsRecordOutput) ToGetDnsRecordsRecordOutput() GetDnsRecordsRecordOutput {
	return o
}

func (o GetDnsRecordsRecordOutput) ToGetDnsRecordsRecordOutputWithContext(ctx context.Context) GetDnsRecordsRecordOutput {
	return o
}

func (o GetDnsRecordsRecordOutput) ToOutput(ctx context.Context) pulumix.Output[GetDnsRecordsRecord] {
	return pulumix.Output[GetDnsRecordsRecord]{
		OutputState: o.OutputState,
	}
}

func (o GetDnsRecordsRecordOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDnsRecordsRecord) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetDnsRecordsRecordOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetDnsRecordsRecord) string { return v.Ip }).(pulumi.StringOutput)
}

type GetDnsRecordsRecordArrayOutput struct{ *pulumi.OutputState }

func (GetDnsRecordsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDnsRecordsRecord)(nil)).Elem()
}

func (o GetDnsRecordsRecordArrayOutput) ToGetDnsRecordsRecordArrayOutput() GetDnsRecordsRecordArrayOutput {
	return o
}

func (o GetDnsRecordsRecordArrayOutput) ToGetDnsRecordsRecordArrayOutputWithContext(ctx context.Context) GetDnsRecordsRecordArrayOutput {
	return o
}

func (o GetDnsRecordsRecordArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDnsRecordsRecord] {
	return pulumix.Output[[]GetDnsRecordsRecord]{
		OutputState: o.OutputState,
	}
}

func (o GetDnsRecordsRecordArrayOutput) Index(i pulumi.IntInput) GetDnsRecordsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDnsRecordsRecord {
		return vs[0].([]GetDnsRecordsRecord)[vs[1].(int)]
	}).(GetDnsRecordsRecordOutput)
}

type GetDomainsDomain struct {
	Comment  string `pulumi:"comment"`
	Domain   string `pulumi:"domain"`
	Enabled  bool   `pulumi:"enabled"`
	GroupIds []int  `pulumi:"groupIds"`
	// The ID of this resource.
	Id int `pulumi:"id"`
	// Filter on allowed or denied domains. Must be either 'allow' or 'deny'.
	Type     string `pulumi:"type"`
	Wildcard bool   `pulumi:"wildcard"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
//	GetDomainsDomainArgs{...}
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	Comment  pulumi.StringInput   `pulumi:"comment"`
	Domain   pulumi.StringInput   `pulumi:"domain"`
	Enabled  pulumi.BoolInput     `pulumi:"enabled"`
	GroupIds pulumi.IntArrayInput `pulumi:"groupIds"`
	// The ID of this resource.
	Id pulumi.IntInput `pulumi:"id"`
	// Filter on allowed or denied domains. Must be either 'allow' or 'deny'.
	Type     pulumi.StringInput `pulumi:"type"`
	Wildcard pulumi.BoolInput   `pulumi:"wildcard"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

func (i GetDomainsDomainArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomain] {
	return pulumix.Output[GetDomainsDomain]{
		OutputState: i.ToGetDomainsDomainOutputWithContext(ctx).OutputState,
	}
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
//	GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

func (i GetDomainsDomainArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomain] {
	return pulumix.Output[[]GetDomainsDomain]{
		OutputState: i.ToGetDomainsDomainArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomain] {
	return pulumix.Output[GetDomainsDomain]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainsDomainOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetDomainsDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetDomainsDomainOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetDomainsDomainOutput) GroupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []int { return v.GroupIds }).(pulumi.IntArrayOutput)
}

// The ID of this resource.
func (o GetDomainsDomainOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomain) int { return v.Id }).(pulumi.IntOutput)
}

// Filter on allowed or denied domains. Must be either 'allow' or 'deny'.
func (o GetDomainsDomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetDomainsDomainOutput) Wildcard() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.Wildcard }).(pulumi.BoolOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomain] {
	return pulumix.Output[[]GetDomainsDomain]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetGroupsGroup struct {
	Description string `pulumi:"description"`
	Enabled     bool   `pulumi:"enabled"`
	// The ID of this resource.
	Id   int    `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//	GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Enabled     pulumi.BoolInput   `pulumi:"enabled"`
	// The ID of this resource.
	Id   pulumi.IntInput    `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

func (i GetGroupsGroupArgs) ToOutput(ctx context.Context) pulumix.Output[GetGroupsGroup] {
	return pulumix.Output[GetGroupsGroup]{
		OutputState: i.ToGetGroupsGroupOutputWithContext(ctx).OutputState,
	}
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//	GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

func (i GetGroupsGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupsGroup] {
	return pulumix.Output[[]GetGroupsGroup]{
		OutputState: i.ToGetGroupsGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetGroupsGroup] {
	return pulumix.Output[GetGroupsGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of this resource.
func (o GetGroupsGroupOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupsGroup] {
	return pulumix.Output[[]GetGroupsGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetCnameRecordsRecordInput)(nil)).Elem(), GetCnameRecordsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCnameRecordsRecordArrayInput)(nil)).Elem(), GetCnameRecordsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDnsRecordsRecordInput)(nil)).Elem(), GetDnsRecordsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDnsRecordsRecordArrayInput)(nil)).Elem(), GetDnsRecordsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainInput)(nil)).Elem(), GetDomainsDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainArrayInput)(nil)).Elem(), GetDomainsDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterOutputType(GetCnameRecordsRecordOutput{})
	pulumi.RegisterOutputType(GetCnameRecordsRecordArrayOutput{})
	pulumi.RegisterOutputType(GetDnsRecordsRecordOutput{})
	pulumi.RegisterOutputType(GetDnsRecordsRecordArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
}
